name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  deploy-and-run:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout repo
      - name: Checkout code
        uses: actions/checkout@v3

      # 2️⃣ Setup Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      # 3️⃣ Install dependencies + Databricks CLI
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install --upgrade databricks-cli jq yq

      # 4️⃣ Configure Databricks CLI and Deploy Job
      - name: Deploy Databricks Job
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          # Configure Databricks CLI to use Jobs API 2.1
          databricks jobs configure --version=2.1
          
          # Convert YAML to JSON if needed
          if [ -f "jobs/titanic_job.yaml" ]; then
            yq eval -o=json '.' jobs/titanic_job.yaml > jobs/titanic_job.json
            JOB_CONFIG_FILE="jobs/titanic_job.json"
          elif [ -f "jobs/titanic_job.json" ]; then
            JOB_CONFIG_FILE="jobs/titanic_job.json"
          else
            echo "❌ Job configuration file not found!"
            exit 1
          fi

          # List job ID if it exists
          JOB_ID=$(databricks jobs list --output JSON | jq -r '.jobs[]? | select(.settings.name=="titanic_pipeline") | .job_id')

          if [ -n "$JOB_ID" ]; then
            echo "ℹ️ Updating existing job $JOB_ID"
            databricks jobs reset --job-id "$JOB_ID" --json-file "$JOB_CONFIG_FILE"
          else
            echo "ℹ️ Creating new job"
            databricks jobs create --json-file "$JOB_CONFIG_FILE"
          fi

      # 5️⃣ Trigger Databricks Job
      - name: Run Databricks Job
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          # Wait a moment for job to be created/updated
          sleep 5
          
          JOB_ID=$(databricks jobs list --output JSON | jq -r '.jobs[]? | select(.settings.name=="titanic_pipeline") | .job_id')

          if [ -z "$JOB_ID" ]; then
            echo "❌ Job not found!"
            exit 1
          fi

          echo "▶️ Triggering job ID: $JOB_ID"
          RUN_JSON=$(databricks jobs run-now --job-id "$JOB_ID" --output JSON)
          RUN_ID=$(echo "$RUN_JSON" | jq -r '.run_id')
          echo "⏳ Waiting for run $RUN_ID to finish..."
          databricks runs wait --run-id "$RUN_ID"